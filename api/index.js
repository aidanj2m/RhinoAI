const { Configuration, OpenAIApi } = require('openai');
const { SYSTEM_PROMPT } = require('./mainPrompt');

// Initialize OpenAI configuration with API key from environment variables
const configuration = new Configuration({
  apiKey: process.env.OPENAI_API_KEY,
});

const openai = new OpenAIApi(configuration);

// Process the Rhino context data and enhance the prompt
function enhancePromptWithContext(contextData, userPrompt) {
  // Format the context data into a meaningful description
  let contextDescription = "Rhino Context:\n";
  
  // Add information about curves if available
  if (contextData.curves) {
    contextDescription += `- ${contextData.curves.count} curves found\n`;
    if (contextData.curves.closed > 0) {
      contextDescription += `- ${contextData.curves.closed} closed curves\n`;
    }
  }
  
  // Add information about the drawing extent if available
  if (contextData.extent) {
    contextDescription += `- Drawing extent: width=${contextData.extent.width}, height=${contextData.extent.height}\n`;
  }
  
  // Add information about layers if available
  if (contextData.layers && contextData.layers.length > 0) {
    contextDescription += `- Layers: ${contextData.layers.join(', ')}\n`;
  }
  
  // Add information about selected objects if available
  if (contextData.selection && contextData.selection.count > 0) {
    contextDescription += `- ${contextData.selection.count} objects selected\n`;
  }
  
  // Combine context with user prompt
  const enhancedPrompt = `${contextDescription}\n\nUser request: ${userPrompt}`;
  return enhancedPrompt;
}

// Format the response to make it ready for execution in Rhino
function formatCodeResponse(responseContent) {
  let code = responseContent;
  
  // Extract code blocks if they exist
  if (code.includes("```python")) {
    code = code.split("```python")[1].split("```")[0].trim();
  } else if (code.includes("```")) {
    code = code.split("```")[1].split("```")[0].trim();
  }
  
  // Add some safety imports and error handling
  const processedCode = `
# Generated by RhinoAI
import rhinoscriptsyntax as rs
import math
import random
import sys
import traceback

try:
${code.split('\n').map(line => '    ' + line).join('\n')}

except Exception as e:
    print("Error executing code: " + str(e))
    traceback.print_exc()
`;
  
  return processedCode;
}

module.exports = async (req, res) => {
  // Set CORS headers to allow requests from any origin
  res.setHeader('Access-Control-Allow-Credentials', true);
  res.setHeader('Access-Control-Allow-Origin', '*');
  res.setHeader('Access-Control-Allow-Methods', 'GET,OPTIONS,PATCH,DELETE,POST,PUT');
  res.setHeader(
    'Access-Control-Allow-Headers',
    'X-CSRF-Token, X-Requested-With, Accept, Accept-Version, Content-Length, Content-MD5, Content-Type, Date, X-Api-Version, Authorization'
  );

  // Handle OPTIONS request (preflight)
  if (req.method === 'OPTIONS') {
    res.status(200).end();
    return;
  }

  // Only allow POST requests for the API endpoint
  if (req.method !== 'POST') {
    return res.status(405).json({ error: 'Method not allowed. Please use POST.' });
  }

  try {
    // Validate request body
    const { prompt, context = {}, model = 'gpt-4', temperature = 0.7, max_tokens = 2048 } = req.body;

    if (!prompt) {
      return res.status(400).json({ error: 'Missing required field: prompt' });
    }

    // Check if API key is configured
    if (!configuration.apiKey) {
      return res.status(500).json({
        error: 'OpenAI API key not configured',
        message: 'Please set the OPENAI_API_KEY environment variable in the Vercel dashboard'
      });
    }

    // Enhance the prompt with context information if provided
    const enhancedPrompt = context ? enhancePromptWithContext(context, prompt) : prompt;

    // Make request to OpenAI API
    const response = await openai.createChatCompletion({
      model: model,
      messages: [
        { role: 'system', content: SYSTEM_PROMPT },
        { role: 'user', content: enhancedPrompt }
      ],
      temperature: temperature,
      max_tokens: max_tokens
    });

    // Get the AI generated content
    const generatedContent = response.data.choices[0].message.content;
    
    // Format the code for Rhino execution
    const processedCode = formatCodeResponse(generatedContent);

    // Return both raw and processed responses
    return res.status(200).json({
      raw_result: generatedContent,
      executable_code: processedCode
    });
  } catch (error) {
    console.error('Error processing request:', error);
    
    // Determine the appropriate error message and status code
    const statusCode = error.response?.status || 500;
    const errorMessage = error.response?.data?.error?.message || error.message || 'An unknown error occurred';
    
    return res.status(statusCode).json({
      error: errorMessage
    });
  }
}; 